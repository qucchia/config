#+title:Dotfiles
#+PROPERTY: header-args:emacs-lisp :tangle ../.emacs.d/dotfiles.el

* Custom variables

#+begin_src emacs-lisp

  (defcustom dotfiles-directory "~/.dotfiles"
    "Directory where the dotfiles repository is stored."
    :type 'string
    :group 'dotfiles)

  (defcustom dotfiles-bin-directory ".bin"
    "Directory where shell scripts are stored, relative to
  `dotfiles-directory'."
    :type 'string
    :group 'dotfiles)

  (defcustom dotfiles-org-directory "org-files"
    "Directory where Org files are stored, relative to
  `dotfiles-directory'."
    :type 'string
    :group 'dotfiles)

  (defcustom dotfiles-gitignore-marker "\n# -- Generated by dotfiles.el -- \n\n"
    "The marker string to be placed in the .gitignore file to
  indicate where the auto-generated list of ignored files begins."
    :type 'string
    :group 'dotfiles)

#+end_src

* File helpers

#+begin_src emacs-lisp

  (defun dotfiles--expand-bin-directory ()
    "Return absolute path of `dotfiles-bin-directory'."
    (expand-file-name dotfiles-bin-directory dotfiles-directory))

  (defun dotfiles--bin-files ()
    "Return shell scripts in `dotfiles-bin-directory'."
    (let (files '())
      (dolist (file (directory-files (dotfiles--expand-bin-directory)))
        (when (string-match-p "^[^.].*[^~]$" file)
          (setq files (cons file files))))
      files))

  (defun dotfiles--expand-bin-file (bin-file)
    "Return absolute path of BIN-FILE in `dotfiles-bin-directory'."
    (expand-file-name bin-file (dotfiles--expand-bin-directory)))

  (defun dotfiles--expand-org-directory ()
    "Return absolute path of `dotfiles-org-directory'."
    (expand-file-name dotfiles-org-directory dotfiles-directory))
    
  (defun dotfiles--org-files ()
    "Return Org files in `dotfiles-org-directory'."
    (let (files '())
      (dolist (file (directory-files (dotfiles--expand-org-directory)))
        (when (string-match-p "^[^.].*\\.org$" file)
          (setq files (cons file files))))
      files))

  (defun dotfiles--expand-org-file (org-file)
    "Return absolute path of ORG-FILE in `dotfiles-org-directory'."
    (expand-file-name org-file (dotfiles--expand-org-directory)))
    
#+end_src

* Tangling

#+begin_src emacs-lisp

  (defun dotfiles-tangle-org-file (&optional org-file)
    "Tangle ORG-FILE relative to `dotfiles-org-directory', or if
  none is specified, the file in the current buffer."
    (interactive)
    (setq org-file (if org-file
                     (dotfiles--expand-org-file org-file)
                     buffer-file-name))
    (message "File: %s" org-file)
    ;; Suppress prompts and messages
    (let ((org-confirm-babel-evaluate nil)
          (message-log-max nil)
          (inhibit-message t))
      (org-babel-tangle-file org-file)))

  (defun dotfiles-tangle-org-files ()
    "Tangle all the Org files in `dotfiles-org-directory'."
    (interactive)
    (dolist (file (dotfiles--org-files))
        (dotfiles-tangle-org-file file))
    (message "Dotfiles are up to date!"))

#+end_src

* Gitignore

#+begin_src emacs-lisp

  (defun dotfiles--scan-for-output-files (org-file)
    "Return a list with the paths of the files tangled from ORG-FILE."
    (let ((output-files '())
          (current-match t))
      (with-current-buffer (or (get-file-buffer org-file)
                               (find-file-noselect org-file))
        (save-excursion
          (beginning-of-buffer)
          (while current-match
            (setq current-match (search-forward-regexp ":tangle +" nil t))
            (when current-match
              (let ((output-file (thing-at-point 'filename t)))
                (unless (or (not output-file)
                            (string-equal output-file "no"))
                  (setq output-files (cons
                      (replace-regexp-in-string "^../" "" output-file)
                      output-files))))))))
       output-files))
       
  (defun dotfiles--update-gitignore ()
    "Create or update a generated list of files in `dotfiles-directory''s .gitignore extracted from `dotfiles--scan-for-output-files'."
    ;; Get output files
    (let ((output-files '()))
      (dolist (file (dotfiles--org-files))
        (setq output-files
          (append output-files
            (dotfiles--scan-for-output-files
              (dotfiles--expand-org-file file)))))

      ;; Sort files alphabetically
      (setq output-files (sort output-files (lambda (a b)
                                             (string-lessp a b))))

      (let ((gitignore-file (expand-file-name ".gitignore" dotfiles-directory)))
         (with-current-buffer (or (get-file-buffer gitignore-file)
                                  (find-file-noselect gitignore-file))
           (save-excursion
             (beginning-of-buffer)
             (or (search-forward dotfiles-gitignore-marker nil t)
                 (progn (end-of-buffer)
                        (insert "\n" dotfiles-gitignore-marker)))
             
             (delete-region (point) (point-max))
             (dolist (output-file output-files)
               (insert output-file "\n")))
  
           (save-buffer)))))

#+end_src

* Shell scripts

#+begin_src emacs-lisp

  (defun dofiles-detect-sh-mode ()
    "Enable `sh-mode' if in a .bin folder."
    (message buffer-file-name)
    (when (string-prefix-p
            (expand-file-name ".bin/" dotfiles-directory)
            (expand-file-name buffer-file-name))
      (sh-mode)))
      
  (defun dotfiles-make-scripts-executable ()
    (dolist (file (dotfiles--bin-files))
      (set-file-modes (dotfiles--expand-bin-file file) 493)))

  (add-hook 'find-file #'dotfiles-detect-sh-mode)

#+end_src

* Dired hide dotfiles

This custom function hides all dotfiles unless in the dotfiles repository.

#+begin_src emacs-lisp

  (defun qucchia/in-dotfiles-directory (directory)
    (string-prefix-p
      (expand-file-name dotfiles-directory)
      (expand-file-name directory)))

  (defun qucchia/dired-mode-hook ()
    (if (qucchia/in-dotfiles-directory dired-directory)
      (setq-local dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\'")
      (setq-local dired-omit-files "\\`[.]\\|\\`[.]?#\\|\\`[.][.]?\\'"))
    (dired-omit-mode))

  (defun qucchia/dired-hide-dotfiles ()
    "Hide dotfiles unless under the `dotfiles-directory'."
    (when (not ))
      (dired-hide-dotfiles-mode -1))
      
  (defun qucchia/dired-hide-dotfiles-mode-hook ()
    (remove-hook 'dired-after-readin-hook #'dired-hide-dotfiles--hide))
      
#+end_src

* Provide

#+begin_src emacs-lisp

  (provide 'dotfiles)

#+end_src
