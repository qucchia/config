#+title:Psst
#+PROPERTY: header-args:emacs-lisp :tangle ../../home/.emacs.d/lisp/psst.el

Psst: all the hints and help I could need.

* Ivy

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-height 10))

#+end_src

** Ivy Rich

#+begin_src emacs-lisp

  (use-package ivy-rich
    :after (counsel ivy)
    :init
    (ivy-rich-mode 1))

#+end_src

* Counsel

#+begin_src emacs-lisp

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

#+end_src

* Helpful

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ;; Map some C-h commands to Helpful
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key)
    :init
    ;; Scroll with SPC and S-SPC
    (evil-define-key 'normal helpful-mode-map " " 'evil-scroll-page-down)
    (evil-define-key 'normal helpful-mode-map "S- " 'evil-scroll-page-up))

#+end_src

* Which key

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3))

#+end_src

* Spell checking

#+begin_src emacs-lisp

  (use-package ispell
    :init (ispell-change-dictionary "en_GB-ise" t))

#+end_src

* Provide

#+begin_src emacs-lisp

  (provide 'psst)

#+end_src
