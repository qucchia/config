#+title:Racket
#+PROPERTY: header-args:emacs-lisp :tangle ../../home/.emacs.d/lisp/racket.el

Make a racket with Racket: music utilities.

* Use package

#+begin_src emacs-lisp

  (use-package emms
    :config
    (emms-all)
    (emms-default-players)
    :custom
    (emms-source-file-default-directory "~/Music/"))

#+end_src

* Custom variables

#+begin_src emacs-lisp

  (defcustom racket-music-directory "~/Music/"
    "Directory where music is stored."
    :type 'string
    :group 'racket)

  (defcustom racket-favourites-playlist-file "~/Music/playlists/Favourites.el"
    "File path where favourites playlist is stored."
    :type 'string
    :group 'racket)

#+end_src

* Play Star Wars music

#+begin_src emacs-lisp

  (defun racket-play-star-wars-music ()
    "Play a different Star Wars soundtrack depending on the day of the week."
    (emms-play-directory-tree
      (let ((day-of-week (substring (current-time-string) 0 3))
            (star-wars-directory ""))
        (when (equal day-of-week "Sun")
          (setq star-wars-directory "01 The Phantom Menace"))
        (when (equal day-of-week "Mon")
          (setq star-wars-directory "02 Attack of the Clones"))
        (when (equal day-of-week "Tue")
          (setq star-wars-directory "03 Revenge of the Sith"))
        (when (equal day-of-week "Wed")
          (setq star-wars-directory "04 A New Hope"))
        (when (equal day-of-week "Thu")
          (setq star-wars-directory "05 The Empire Strikes Back"))
        (when (equal day-of-week "Fri")
          (setq star-wars-directory "06 Return of the Jedi"))
        (when (equal day-of-week "Sat")
          (setq star-wars-directory "The Mandalorian"))
        (string-join (list "~/Music/Star Wars/" star-wars-directory)))))

#+end_src

* Favourites playlist

#+begin_src emacs-lisp

  (defun racket-add-favourites ()
    "Add favourites playlist"
    (interactive)
    (load-file racket-favourites-playlist-file)

    (let ((played t))
      (racket--add-directory racket-music-directory racket-favourites-playlist)))

  (defun racket-play-favourites ()
    "Play favourites playlist"
    (interactive)
    (load-file racket-favourites-playlist-file)

    (let ((played nil))
      (racket--add-directory racket-music-directory racket-favourites-playlist)))
    
  (defun racket--add-directory (directory items)
      (dolist (item items)
        (if (stringp item)
          (if played
            (emms-add-playlist-file (concat (expand-file-name item directory) ".ogg"))
            (progn
              (emms-play-playlist-file (concat (expand-file-name item directory) ".ogg"))
              (setq played t)))
          (racket--add-directory (expand-file-name (car item) directory) (cdr item)))))

  (defun racket-add-track-to-favourites ()
    "Add current track to favourites"
    (interactive)
    (load-file racket-favourites-playlist-file)

    (let ((line (concat "\""
                  (file-name-sans-extension
                    (file-relative-name (emms-score-current-selected-track-filename) "~/Music/"))
                  "\""))
           (file racket-favourites-playlist-file))
      (with-current-buffer (or (get-file-buffer file) (find-file-noselect file))
        (save-excursion
          (beginning-of-buffer)
          (if (search-forward line nil t)
            ;; Don’t do anything if the track is already added
            (message "The track is already inside the playlist.")
            ;; Add to playlist
            (progn 
              (end-of-buffer)
              (search-backward ")")
              (search-backward ")")
              (backward-char)
              (insert line "\n")
              (save-buffer)
              (message "Track added to playlist.")))))))

  (defun racket-remove-track-from-favourites ()
    "Remove current track from favourites"
    (interactive)
    (load-file racket-favourites-playlist-file)

    (let ((line (concat "\""
                  (file-name-sans-extension
                    (file-relative-name (emms-score-current-selected-track-filename) "~/Music/"))
                  "\""))
           (file racket-favourites-playlist-file))
      (with-current-buffer (or (get-file-buffer file) (find-file-noselect file))
        (save-excursion
          (beginning-of-buffer)
          (if (search-forward line nil t)
            ;; Remove from playlist
            (progn
              (beginning-of-line)
              (kill-line 1)
              (save-buffer)
              (message "Track removed from playlist."))
            ;; Don’t do anything if the track is already added
            (message "The track isn’t inside the playlist."))))))
        
  (defun racket-open-favourites ()
    "Open favourites playlist"
    (interactive)
    (find-file racket-favourites-playlist-file))

#+end_src

* Provide

#+begin_src emacs-lisp

  (provide 'racket)

#+end_src
