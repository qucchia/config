#+title:Racket
#+PROPERTY: header-args:emacs-lisp :tangle ../../home/.emacs.d/lisp/racket.el

Make a racket with Racket: music utilities.

* Custom variables

#+begin_src emacs-lisp

  (defcustom racket-music-directory "~/Music/"
    "Directory where music is stored."
    :type 'string
    :group 'racket)

  (defcustom racket-playlists-directory "playlists"
    "Path where playlists directory is stored, relative to `racket-directory-music'."
    :type 'string
    :group 'racket)

  (defcustom racket-favourites-playlist-file "favourites.el"
    "File path where favourites playlist is stored, relative to `racket-playlists-directory'."
    :type 'string
    :group 'racket)

#+end_src

* EMMS configuration

#+begin_src emacs-lisp

  (use-package emms
    :config
    (emms-all)
    (setq emms-player-list '(emms-player-vlc emms-player-vlc-playlist))
    :custom
    (emms-source-file-default-directory racket-music-directory))

  (defun racket-fix-wrong-track-type ()
    (let ((track (emms-playlist-current-selected-track)))
      (if (and (equal (emms-track-type track)
                       'playlist)
               (s-ends-with-p ".ogg" (emms-track-name track)))
        (emms-track-set track 'type 'file))))

  (add-hook 'emms-playlist-selection-changed-hook #'racket-fix-wrong-track-type)

#+end_src

* Play Star Wars music

#+begin_src emacs-lisp

  (defun racket-play-star-wars-music ()
    "Play a different Star Wars soundtrack depending on the day of the week."
    (emms-play-directory-tree
      (let ((day-of-week (substring (current-time-string) 0 3))
            (star-wars-directory ""))
        (when (equal day-of-week "Sun")
          (setq star-wars-directory "01 The Phantom Menace"))
        (when (equal day-of-week "Mon")
          (setq star-wars-directory "02 Attack of the Clones"))
        (when (equal day-of-week "Tue")
          (setq star-wars-directory "03 Revenge of the Sith"))
        (when (equal day-of-week "Wed")
          (setq star-wars-directory "04 A New Hope"))
        (when (equal day-of-week "Thu")
          (setq star-wars-directory "05 The Empire Strikes Back"))
        (when (equal day-of-week "Fri")
          (setq star-wars-directory "06 Return of the Jedi"))
        (when (equal day-of-week "Sat")
          (setq star-wars-directory "The Mandalorian"))
        (expand-file-name star-wars-directory
          (expand-file-name "Star Wars" racket-music-directory)))))

#+end_src

* Playlists

#+begin_src emacs-lisp

  (defun racket-expand-playlist (file)
    "Expand playlist FILE from `racket-playlists-directory'."
    (expand-file-name file
      (expand-file-name
        racket-playlists-directory
        racket-music-directory)))

  (defun racket-open-playlist (file)
    "Open playlist FILE."
    (find-file (racket-expand-playlist file)))

  (defun racket-load-playlist (file)
    "Load playlist from file FILE."
    (load-file (racket-expand-playlist file)))

  (defun racket-add-playlist (file)
    "Add playlist FILE to EMMS."
    (racket-load-playlist (racket-expand-playlist file))
    (let ((played t))
      (racket--add-directory racket-music-directory racket-playlist)))

  (defun racket--add-directory (directory items)
    (dolist (item items)
      (if (stringp item)
        (if played
          (emms-add-playlist-file (concat (expand-file-name item directory) ".ogg"))
          (progn
            (emms-play-playlist-file (concat (expand-file-name item directory) ".ogg"))
            (setq played t)))
        (racket--add-directory (expand-file-name (car item) directory) (cdr item)))))

  (defun racket-play-playlist (file)
    "Play playlist FILE in EMMS."
    (racket-load-playlist (racket-expand-playlist file))
    (emms-stop)
    (let ((played nil))
      (racket--add-directory racket-music-directory racket-playlist))
    (message (racket-expand-playlist file)))

  (defun racket-get-track (&optional track)
    "Return TRACK relative to `racket-music-directory'.  If no TRACK is provided, the currently playing track in EMMS is used."
    (let ((track (or track (emms-score-current-selected-track-filename))))
      (file-relative-name
        (file-name-sans-extension track)
        "~/Music/")))

  (defun racket-add-track-to-playlist (file &optional track)
    "Add TRACK (see `racket-get-track') to playlist in FILE."
    (let ((line (format "\"%s\"" (racket-get-track track)))
          (file (racket-expand-playlist file)))
      (with-current-buffer (or (get-file-buffer file) (find-file-noselect file))
        (save-excursion
          (beginning-of-buffer)
          (if (search-forward line nil t)
            ;; Don’t do anything if the track is already added
            (message "The track is already inside the playlist.")
            ;; Add to playlist
            (progn
              (end-of-buffer)
              (search-backward ")")
              (search-backward ")")
              (backward-char)
              (insert line "\n")
              (save-buffer)
              (message "Track added to playlist.")))))))

  (defun racket-remove-track-from-playlist (file &optional track)
    "Remove TRACK (see `racket-get-track') from playlist in FILE."
    (let ((line (format "\"%s\"" (racket-get-track track)))
          (file (racket-expand-playlist file)))
      (with-current-buffer (or (get-file-buffer file) (find-file-noselect file))
        (save-excursion
          (beginning-of-buffer)
          (if (search-forward line nil t)
            ;; Remove from playlist
            (progn
              (beginning-of-line)
              (kill-line 1)
              (save-buffer)
              (message "Track removed from playlist."))
            ;; Don’t do anything if the track is already added
            (message "The track isn’t inside the playlist."))))))

#+end_src

** Favourites playlist

#+begin_src emacs-lisp

  (defun racket-add-favourites ()
    "Add favourites playlist."
    (interactive)
    (racket-add-playlist racket-favourites-playlist-file))

  (defun racket-play-favourites ()
    "Play favourites playlist."
    (interactive)
    (racket-play-playlist racket-favourites-playlist-file))

  (defun racket-add-track-to-favourites (&optional track)
    "Add current track to favourites."
    (interactive)
    (racket-add-track-to-playlist
      racket-favourites-playlist-file
      track))

  (defun racket-remove-track-from-favourites (&optional track)
    "Remove current track from favourites."
    (interactive)
    (racket-remove-track-from-playlist
      racket-favourites-playlist-file
      track))

  (defun racket-open-favourites ()
    "Open favourites playlist."
    (interactive)
    (racket-open-playlist racket-favourites-playlist-file))

#+end_src

* Provide

#+begin_src emacs-lisp

  (provide 'racket)

#+end_src
