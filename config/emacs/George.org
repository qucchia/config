#+title:George
#+PROPERTY: header-args:emacs-lisp :tangle ../../home/.emacs.d/lisp/george.el

George: Org configuration.

See also the [[file:~/.dotfiles/config/Theme.org::*Org mode][Org face customisation in Theme]].

* General configuration

Function to run after =org-mode-hook=.

#+begin_src emacs-lisp

  (defun george-setup ()
    "Setup Org mode."
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)

    (flycheck-mode 0)
    (display-line-numbers-mode 0)
    (display-fill-column-indicator-mode 0)
    ;; Set correct spelling language
    (save-excursion
      (beginning-of-buffer)
      (when (search-forward-regexp "^#[+]language: " nil t)
        (when (string= "es" (word-at-point t))
          (ispell-change-dictionary "castellano"))
        (when (string= "ca" (word-at-point t))
          (ispell-change-dictionary "català")))))

#+end_src

Use package.

#+begin_src emacs-lisp

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . george-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-catch-invisible-edits 'smart)

    (setq org-log-done 'time)
    (setq org-log-into-drawer t))

#+end_src

* Keybindings

=evil-org=: https://github.com/Somelauw/evil-org-mode

#+begin_src emacs-lisp

  (use-package evil-org
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

#+end_src

Define text objects for =verbatim= and ~code~ blocks. This way I can use Evil shortcuts like =yi~= to quickly copy the contents of a code expression.

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (evil-define-text-object george-inner-verbatim (count &optional beg end type)
      "Select inner Org verbatim expression."
      :extend-selection nil
      (evil-select-paren "=" "=" beg end type count))

    (evil-define-text-object george-a-verbatim (count &optional beg end type)
      "Select an Org verbatim expression."
      :extend-selection nil
      (evil-select-paren "=" "=" beg end type count t))

    (evil-define-text-object george-inner-code (count &optional beg end type)
      "Select inner Org code expression."
      :extend-selection nil
      (evil-select-paren "~" "~" beg end type count))

    (evil-define-text-object george-a-code (count &optional beg end type)
      "Select an Org code expression."
      :extend-selection nil
      (evil-select-paren "~" "~" beg end type count t))

    (define-key evil-inner-text-objects-map "=" 'george-inner-verbatim)
    (define-key evil-outer-text-objects-map "=" 'george-a-verbatim)
    (define-key evil-inner-text-objects-map "~" 'george-inner-code)
    (define-key evil-outer-text-objects-map "~" 'george-a-code))

#+end_src

* User interface

** Fonts

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "DejaVu sans" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed pitch in Org mode appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** =org-superstar-mode=: Bullets

#+begin_src emacs-lisp

  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :custom
    ;; Headings
    (org-superstar-leading-bullet ?\s)
    (org-indent-mode-turns-on-hiding-stars nil)
    (org-superstar-headline-bullets-list '(?✷ ?○ ?◉ ?●))

    ;; Todos
    (org-superstar-special-todo-items t)
    (org-superstar-todo-bullet-alist '(("TODO" . ?☐)
                                       ("NEXT" . ?☐)
                                       ("DONE" . ?☑)))

    ;; List items
    (org-superstar-item-bullet-alist '((?- . ?•)
                                       (?+ . ?›)
                                       (?* . ?⭑))))

#+end_src

* Babel languages

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (js . t)
       (shell . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

Auto-tangle configuration files

#+begin_src emacs-lisp

  (defun george-babel-tangle-config ()
    "Tangle dotfiles on save."
    (when (string-prefix-p (expand-file-name "~/.dotfiles/")
                         (buffer-file-name))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda ()
    (add-hook 'after-save-hook #'george-babel-tangle-config)))

#+end_src

* Agenda

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; Start week on Sunday
    (setq org-agenda-start-on-weekday 0)
    (setq org-agenda-start-with-log-mode t)
    (setq org-agenda-files '("~/Documents/life/Tasks.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
                                          ;Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("@school" . ?S)
            ("@coding" . ?C)
            ("@personal" . ?P)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("note" . ?n)
            ("reading" . ?r)
            ("organisation" . ?o)
            ("spiritual" . ?s)
            ("setup" . ?t)
            ("health" . ?h)
            ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+@school")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<156+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files))))))))


#+end_src

* Capture templates

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/Documents/life/Tasks.org" "Inbox")
             "* TODO %?\n %U\n %a\n %i" :empty-lines 1)
            ("ts" "Clocked Entry Subtask" entry (clock)
             "* TODO %?\n %U\n %a\n %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Documents/life/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Documents/life/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Documents/life/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("my" "Typing Speed" table-line (file+headline "~/Documents/life/Metrics.org" "Typing Speed")
             "| %U | %^{Speed} | %^{Accuracy} | %^{Program} | %^{Notes} |" :kill-buffer t))))

#+end_src

* Structure templates

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("src" . "src"))
    (add-to-list 'org-structure-template-alist '("conf" . "src conf"))
    (add-to-list 'org-structure-template-alist '("css" . "src css"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("html" . "src html"))
    (add-to-list 'org-structure-template-alist '("js" . "src js"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("ts" . "src typescript")))

#+end_src
