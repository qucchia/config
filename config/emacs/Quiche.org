#+title:Quiche
#+PROPERTY: header-args:emacs-lisp :tangle ../../home/.emacs.d/lisp/quiche.el

Quiche: keyboard configuration and keybindings.

* Load Lieutenant

See [[file:Lieutenant.org][Lieutenant]] for general keybindings.

#+begin_src emacs-lisp

  (qucchia-load-file "lieutenant.el")

#+end_src

* Set keymap function

#+begin_src emacs-lisp

  (defun quiche-set-keymap ()
    "Set my custom keymap."
    (interactive)
    (start-process-shell-command "xmodmap" nil
      "xmodmap ~/.xmodmap"))

#+end_src

* Escape key

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  
#+end_src

* Evil

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* Registers

#+begin_src emacs-lisp

  ;; Files
  (set-register ?t '(file . "~/Documents/life/Tasks.org"))

  ;; Directories
  (set-register ?~ '(file . "~"))
  (set-register ?/ '(file . "/"))
  (set-register ?. '(file . "~/.dotfiles"))
  (set-register ?c '(file . "~/.dotfiles/config/emacs"))
  (set-register ?d '(file . "~/Downloads"))
  (set-register ?D '(file . "~/Documents"))
  (set-register ?m '(file . "~/Music"))
  (set-register ?p '(file . "~/Projects"))

#+end_src

* Provide

#+begin_src emacs-lisp

  (provide 'quiche)

#+end_src
