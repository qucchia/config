#+title:Lieutenant
#+PROPERTY: header-args:emacs-lisp :tangle ../../home/.emacs.d/lisp/lieutenant.el

Lieutenant: keymaps and keybindings, using Evil and General.

Note: =universal-argument= is bound to =s-u= instead of =C-u=. I refer to it as =C-u= in this document to remain consistent with the official documentation, but I’m actually referring to =s-u=.

* See also

I also have some keybindings configuration in the following places:
- [[file:Desktop.org::*Keybindings][EXWM]]
- [[file:Psst.org::*Ivy][Ivy]]
- [[file:Psst.org::*Counsel][Counsel]]
- Some =C-h= prefixed shortcuts to [[file:Psst.org::*Helpful][Helpful]]
- [[file:George.org::*Evil text objects][Org text objects]]

* Main

Use escape key to quit.

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

Register shortcuts: use =C-x r j <char>= to jump to them.

#+begin_src emacs-lisp

  ;; Files
  (set-register ?t '(file . "~/Documents/life/Tasks.org"))

  ;; Directories
  (set-register ?~ '(file . "~"))
  (set-register ?/ '(file . "/"))
  (set-register ?. '(file . "~/.dotfiles"))
  (set-register ?c '(file . "~/.dotfiles/config/emacs"))
  (set-register ?d '(file . "~/Downloads"))
  (set-register ?D '(file . "~/Documents"))
  (set-register ?m '(file . "~/Music"))
  (set-register ?p '(file . "~/Projects"))

#+end_src

* Keymap

I have a small keymap that maps Caps Lock to Left Super and the key between Z and Left Shift to Escape, to reduce the distance needed to press these keys.

#+begin_src conf :tangle ../../home/.xmodmap

  clear mod4

  keycode 66 = Super_L
  keycode 94 = Escape

  add Mod4 = Super_L Super_R

#+end_src

Set keymap function (bound to =C-SPC x=).

#+begin_src emacs-lisp

  (defun lieutenant-set-keymap ()
    "Set my custom keymap."
    (interactive)
    (start-process-shell-command "xmodmap" nil
      "xmodmap ~/.xmodmap")
    (message "Keymap set"))

#+end_src

* General

https://github.com/noctuid/general.el

#+begin_src emacs-lisp :noweb yes

  (use-package general
    :after evil
    :config
    (general-create-definer lieutenant-leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "C-SPC"
      :global-prefix "C-SPC")

    ;; Leader keys: see section below
    (lieutenant-leader-keys
      <<bindings>>)

    (general-define-key :states '(normal emacs)
      "SPC"   'evil-scroll-page-down
      "S-SPC" 'evil-scroll-page-up)

    (general-define-key
      "C-M-n" 'counsel-switch-buffer
      "s-x"   '(lambda ()
                 (interactive)
                 (if ivy-mode
                 (progn (ivy-mode -1)
                          (execute-extended-command prefix-arg)
                          (ivy-mode))
                   (execute-extended-command prefix-arg)))
      "s-u" 'universal-argument
      "M-v" 'scroll-other-window-down
      "<pause>" 'emms-pause))

#+end_src

* Evil

=evil=: extensible vi layer
Links: [[https://github.com/emacs-evil/evil][GitHub]], [[info:evil][Info]]

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump t)
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-want-fine-undo t)
    :config
    (evil-mode 1)
    (setq-default evil-shift-width 2)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

#+end_src

=evil-collection=: https://github.com/emacs-evil/evil-collection

#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* Leader keys

These are the leader keys bound to =C-SPC= (see [[General][General]]), and are the home to most of my custom keyboard shortcuts. I have organised them according to their leader keys, along with the [[Miscellaneous][Miscellaneous]] ones at the end.

** =.=: Dotty

#+begin_src emacs-lisp :noweb-ref bindings :tangle no

  "."  '(:ignore t :which-key "dotty")
  ".o" '(dotty-open-tangled-file :which-key "open tangled file")

#+end_src

** =b=: Bookmarks

#+begin_src emacs-lisp :noweb-ref bindings :tangle no

  "b"   '(:ignore t :which-key "bookmark")
  "bd"  '((lambda ()
            (interactive)
            (browse-url "https://discord.com/app"))
          :which-key "discord")

  "bf"  '(:ignore t :which-key "firefox")
  "bfp" '((lambda ()
            (interactive)
            (browse-url "about:preferences"))
          :which-key "preferences")

  "bg"  '((lambda ()
            (interactive)
            (browse-url "https://codeberg.org"))
          :which-key "codeberg")
  "bm"  '((lambda ()
            (interactive)
            (browse-url "https://moodle.ins-mediterrania.cat/login/index.php"))
          :which-key "moodle")
  "bw"  '((lambda ()
            (interactive)
            (browse-url "https://web.whatsapp.com"))
          :which-key "whatsapp")
  "by"  '((lambda ()
            (interactive)
            (browse-url "https://www.youtube.com"))
          :which-key "youtube")

#+end_src

*** =bc=: Classroom

#+begin_src emacs-lisp :noweb-ref bindings :tangle no

  "bc"  '(:ignore t :which-key "classroom")
  "bca" '((lambda ()
            (interactive)
            (browse-url "https://classroom.google.com/u/1/c/Mzg3ODg5Nzg1Mzk0"))
          :which-key "english")
  "bcc" '((lambda ()
            (interactive)
            (browse-url "https://classroom.google.com/u/1/c/Mzg5NzM5MTU1NzE1"))
          :which-key "catalan")
  "bcd" '((lambda ()
            (interactive)
            (browse-url "https://classroom.google.com/u/1/c/MTY0ODg2NDY5MjAx"))
          :which-key "dibuix")
  "bce" '((lambda ()
            (interactive)
            (browse-url "https://classroom.google.com/u/1/c/Mzg5NzcxMzA1ODQ1"))
          :which-key "spanish")
  "bcf" '((lambda ()
            (interactive)
            (browse-url "https://classroom.google.com/u/1/c/Mzg5OTkwODAzNjYz"))
          :which-key "p.e.")
  "bcl" '((lambda ()
            (interactive)
            (browse-url "https://classroom.google.com/u/1/c/MzIwODUyMDAyNTQw"))
          :which-key "philosophy")
  "bcm" '((lambda ()
            (interactive)
            (browse-url "https://classroom.google.com/u/1/c/MzIwNjgyODcyMDM4"))
          :which-key "cmc")
  "bcq" '((lambda ()
            (interactive)
            (browse-url "https://classroom.google.com/u/1/c/MzkwMjkzNzQ0Mjc3"))
          :which-key "maths")
  "bct" '((lambda ()
            (interactive)
            (browse-url "https://classroom.google.com/u/1/c/MzkwMjMwODAxMTM4"))
          :which-key "technology")
  "bcu" '((lambda ()
            (interactive)
            (browse-url "https://classroom.google.com/u/1/c/MzU2OTczMzczMDU3"))
          :which-key "tutoria")
  "bcy" '((lambda ()
            (interactive)
            (browse-url "https://classroom.google.com/u/1/c/MzIwNjE5OTE2ODMz"))
          :which-key "physics")
#+end_src

** =m=: Mode

#+begin_src emacs-lisp :noweb-ref bindings :tangle no

  "m"   '(:ignore t :which-key "mode")
  "m'"  '(electric-quote-mode :which-key "electric quote")
  "mf"  '(follow-mode :which-key "follow")
  "mi"  '(ivy-mode :which-key "ivy")
  "mo"  '(org-mode :which-key "org")
  "mv"  '(visual-fill-column-mode :which-key "visual fill")
  "mw"  '(whitespace-mode :which-key "whitespace")

#+end_src

** =o=: Open app

#+begin_src emacs-lisp :noweb-ref bindings :tangle no

  "o"     '(:ignore t :which-key "open")
  "oe"    '(emms :which-key "emms")
  "o C-e" '(eshell :which-key "eshell")
  "of"    '(lieutenant-open-firefox :which-key "firefox")
  "oi"    '(ibuffer :which-key "ibuffer")
  "om"    '((lambda ()
              (interactive)
              (dolly-start-process-shell-command "min" "*Min log*" "min"))
            :which-key "min")
  "os"    '(shell :which-key "shell")
  "ot"    '(term :which-key "term")
  "ov"    '(vterm :which-key "vterm")
  "o C-v" '((lambda ()
              (interactive)
              (dolly-start-process-shell-command "vimb" "*Vimb log*" "vimb"))
            :which-key "vimb")

#+end_src

- =C-SPC o f= switches to the Firefox buffer, or creates a new Firefox process if it doesn’t exist.
- =C-u C-SPC o f= creates a new Firefox process.

#+begin_src emacs-lisp

  (defun lieutenant-open-firefox (&optional arg)
    "Create a new Firefox process, or open the firefox buffer if it
  exists.  If ARG is 0 or negative, create a new Firefox process
  regardless."
    (interactive "^p")
    (message "arg: %s" arg)
    (if (or (not (get-buffer "firefox")) (<= arg 0))
      (start-process-shell-command "Firefox" "*Firefox log*" "firefox")
      (switch-to-buffer "firefox")))

#+end_src

** =s=: Search

#+begin_src emacs-lisp :noweb-ref bindings :tangle no

  "s"  '(:ignore t :which-key search)
  "sc" '((lambda (term)
           (interactive (list (lieutenant-uri-encode (read-string "DIEC "))))
           (browse-url (string-join (list "https://dlc.iec.cat/Results?DecEntradaText=" term))))
         :which-key "diec")
  "sd" '((lambda (term)
           (interactive (list (lieutenant-uri-encode (read-string "DuckDuckGo "))))
           (browse-url (string-join (list "https://duckduckgo.com/?q=" term))))
         :which-key "duckduckgo")
  "sm" '((lambda (term)
           (interactive (list (lieutenant-uri-encode (read-string "MDN "))))
           (browse-url (string-join (list "https://developer.mozilla.org/en-US/search?q=" term))))
         :which-key "mdn")
  "sr" '((lambda (term)
           (interactive (list (lieutenant-uri-encode (read-string "RAE "))))
           (browse-url (string-join (list "https://dle.rae.es/" term))))
         :which-key "rae")
  "ss" '((lambda (term)
           (interactive (list (lieutenant-uri-encode (read-string "StartPage "))))
           (browse-url (string-join (list "https://www.startpage.com/do/dsearch?query=" term))))
         :which-key "startpage")
  "sw" '((lambda (term)
           (interactive (list (lieutenant-uri-encode (read-string "SwissCows "))))
           (browse-url (string-join (list "https://swisscows.com/web?query=" term))))
         :which-key "swisscows")
  "sy" '((lambda (term)
           (interactive (list (lieutenant-uri-encode (read-string "YouTube "))))
           (browse-url (string-join (list "https://www.youtube.com/results?search_query=" term))))
         :which-key "youtube")

#+end_src

*** TODO Make URI encode function

#+begin_src emacs-lisp

(defun lieutenant-uri-encode (string)
  "Encode STRING to URI (currently not working)."
  string)

#+end_src

** =t=: Toggle

#+begin_src emacs-lisp :noweb-ref bindings :tangle no

  "t"     '(:ignore t :which-key "toggle")
  "te"    '(emms-mode-line-toggle :which-key "emms modeline")
  "tp"    '(qucchia-toggle-tor :which-key "proxy")
  "tt"    '(counsel-load-theme :which-key "choose theme")
  "ts"    '(lieutenant-toggle-spelling :which-key "spelling")
  "t C-s" '(hydra-text-scale/body :which-key "scale text")

#+end_src

The function below toggles the spellchecking, and decides whether to use =flyspell-mode= or =flyspell-prog-mode=.

#+begin_src emacs-lisp

  (defun lieutenant-toggle-spelling ()
    (interactive)
    (if flyspell-mode
      (progn
        (flyspell-mode 0)
        (message "Spellcheck disabled"))
      (progn
        (if (or (derived-mode-p 'prog-mode)
                (derived-mode-p 'conf-mode))
          (flyspell-prog-mode)
          (flyspell-mode))
        (message "Spellcheck enabled"))))

#+end_src

** =r=: Racket

#+begin_src emacs-lisp :noweb-ref bindings :tangle no

  "r"  '(:ignore t :which-key "racket")
  "ra" 'racket-add-track-to-favourites
  "rf" 'racket-play-favourites
  "ro" 'racket-open-favourites
  "rr" 'racket-remove-track-from-favourites

#+end_src

** =C-p=: Lookup password

#+begin_src emacs-lisp :noweb-ref bindings :tangle no

  "C-p" '(lieutenant-lookup-password :which-key "password")

#+end_src

#+begin_src emacs-lisp

  (defun lieutenant-lookup-password (name)
    "Retrieve the password NAME from pass and copy it to the clipboard."
    (interactive (list (read-string "Password name: ")))
    (let ((process (start-process-shell-command "pass" nil
            (format "pass %s" name))))
      (set-process-filter process
        ;; This function is called after the process completes
        (lambda (process string)
          (let ((string (s-trim string)))
            (if (string-match-p "^Error: " string)
              (message string)
              (progn (kill-new string)
                (message "Password copied"))))))))

#+end_src

** Miscellaneous

#+begin_src emacs-lisp :noweb-ref bindings :tangle no

  "a"   '(org-agenda :which-key "agenda")
  "c"   '(org-capture :which-key "capture")
  "l"   '(org-store-link :which-key "store link")
  "C-l" '(counsel-linux-app :which-key "linux app")
  "k"   '(counsel-descbinds :which-key "keybindings")
  "p"   '(emms-pause :which-key "pause music")
  "u"   '(browse-url :which-key "url")
  "x"   '(lieutenant-set-keymap :which-key "set keymap")
  "y"   '(counsel-yank-pop :which-key "yank")
  "dtw" '(delete-trailing-whitespace :which-key "delete-trailing-whitespace")

#+end_src

