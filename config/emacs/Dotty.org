#+title:Dotty
#+PROPERTY: header-args:emacs-lisp :tangle ../../home/.emacs.d/lisp/dotty.el :mkdirp yes

Go dotty with Dotty: dotfiles utilities.

* Custom variables

#+begin_src emacs-lisp

  (defcustom dotty-directory "~/.dotfiles"
    "Directory where the dotfiles repository is stored."
    :type 'string
    :group 'dotty)

  (defcustom dotty-bin-directory "home/.bin"
    "Directory where shell scripts are stored, relative to
  `dotty-directory'."
    :type 'string
    :group 'dotty)

  (defcustom dotty-org-directory "config"
    "Directory where Org files are stored, relative to
  `dotty-directory'."
    :type 'string
    :group 'dotty)

  (defcustom dotty-gitignore-marker "\n# Generated by dotty.el\n"
    "The marker string to be placed in the .gitignore file to
  indicate where the auto-generated list of ignored files begins."
    :type 'string
    :group 'dotty)

#+end_src

* File helpers

#+begin_src emacs-lisp

  (defun dotty--expand-bin-directory ()
    "Return absolute path of `dotty-bin-directory'."
    (expand-file-name dotty-bin-directory dotty-directory))

  (defun dotty--bin-files ()
    "Return shell scripts in `dotty-bin-directory'."
    (let (files '())
      (dolist (file (directory-files (dotty--expand-bin-directory)))
        (when (string-match-p "^[^.].*[^~]$" file)
          (setq files (cons file files))))
      files))

  (defun dotty--expand-bin-file (bin-file)
    "Return absolute path of BIN-FILE in `dotty-bin-directory'."
    (expand-file-name bin-file (dotty--expand-bin-directory)))

  (defun dotty--expand-org-directory ()
    "Return absolute path of `dotty-org-directory'."
    (expand-file-name dotty-org-directory dotty-directory))

  (defun dotty--org-files ()
    "Return Org files in `dotty-org-directory'."
    (directory-files-recursively (dotty--expand-org-directory) "^[^.].*\\.org$"))

  (defun dotty--expand-org-file (org-file)
    "Return absolute path of ORG-FILE in `dotty-org-directory'."
    (expand-file-name org-file (dotty--expand-org-directory)))

#+end_src

* Tangling

#+begin_src emacs-lisp

  (defun dotty-tangle-org-file (&optional org-file)
    "Tangle ORG-FILE relative to `dotty-org-directory', or if
  none is specified, the file in the current buffer."
    (interactive)
    (setq org-file (if org-file
                     (dotty--expand-org-file org-file)
                     buffer-file-name))
    (message "File: %s" org-file)
    ;; Suppress prompts and messages
    (let ((org-confirm-babel-evaluate nil)
          (message-log-max nil)
          (inhibit-message t))
      (org-babel-tangle-file org-file)))

  (defun dotty-tangle-org-files ()
    "Tangle all the Org files in `dotty-org-directory'."
    (interactive)
    (dolist (file (dotty--org-files))
        (dotty-tangle-org-file file))
    (message "Dotfiles are up to date!"))

#+end_src

* Gitignore

#+begin_src emacs-lisp

  (defun dotty--scan-for-output-files (org-file)
    "Return a list with the paths of the files tangled from ORG-FILE."
    (let ((output-files '())
          (current-match t))
      (with-current-buffer (or (get-file-buffer org-file)
                              (find-file-noselect org-file))
        (save-excursion
          (beginning-of-buffer)
          (while current-match
            (setq current-match (search-forward-regexp ":tangle +" nil t))
            (when current-match
              (let ((output-file (thing-at-point 'filename t)))
                (unless (or (not output-file)
                            (string-equal output-file "no"))
                  (setq output-files
                        (cons
                        ;; Get file path relative to ‘dotty-directory’
                        (file-relative-name
                          (expand-file-name output-file (file-name-directory org-file))
                          dotty-directory)
                        output-files))))))))
      output-files))

  (defun dotty-update-gitignore ()
    "Create or update a generated list of files in `dotty-directory''s .gitignore extracted from `dotty--scan-for-output-files'."
    (interactive)
    ;; Get output files
    (let ((output-files '()))
      (dolist (file (dotty--org-files))
        (setq output-files
          (append output-files
            (dotty--scan-for-output-files
              (dotty--expand-org-file file)))))

      ;; Sort files alphabetically
      (setq output-files (sort output-files (lambda (a b)
                                             (string-lessp a b))))

      (let ((gitignore-file (expand-file-name ".gitignore" dotty-directory)))
         (with-current-buffer (or (get-file-buffer gitignore-file)
                                  (find-file-noselect gitignore-file))
           (save-excursion
             (beginning-of-buffer)
             (or (search-forward dotty-gitignore-marker nil t)
                 (progn (end-of-buffer)
                        (insert "\n" dotty-gitignore-marker)))

             (delete-region (point) (point-max))
             (dolist (output-file output-files)
               (insert output-file "\n")))

           (save-buffer)))))

#+end_src

* Shell scripts

#+begin_src emacs-lisp

  (defun dotty--detect-sh-mode ()
    "Enable `sh-mode' if in a .bin folder."
    (message buffer-file-name)
    (when (string-prefix-p
            (expand-file-name ".bin/" dotty-directory)
            (expand-file-name buffer-file-name))
      (sh-mode)))

  (defun dotty--make-scripts-executable ()
    (dolist (file (dotty--bin-files))
      (set-file-modes (dotty--expand-bin-file file) 493)))

  (add-hook 'find-file #'dotty--detect-sh-mode)

#+end_src

* Dired hide dotfiles

=dotty--dired-mode-hook= hides all dotfiles unless in the dotfiles repository. Add it to =dired-mode-hook= for it to work.

#+begin_src emacs-lisp

  (defun dotty--in-dotfiles-directory (directory)
    (string-prefix-p
      (expand-file-name dotty-directory)
      (expand-file-name directory)))

  (defun dotty--dired-mode-hook ()
    (if (dotty--in-dotfiles-directory dired-directory)
      (setq-local dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\'")
      (setq-local dired-omit-files "\\`[.]\\|\\`[.]?#\\|\\`[.][.]?\\'"))
    (dired-omit-mode))

#+end_src

* Open tangled file

#+begin_src emacs-lisp

  (defun dotty-open-tangled-file ()
    (interactive)
    "Open the file the current buffer is tangled to."
    (save-excursion
      (beginning-of-buffer)
      (search-forward-regexp "^#\\+PROPERTY: header-args:[a-z-]+ :tangle ")
      (find-file (thing-at-point 'filename t))))

#+end_src

* Provide

#+begin_src emacs-lisp

  (provide 'dotfiles)

#+end_src
