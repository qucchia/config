#+title:Emacs
#+PROPERTY: header-args:emacs-lisp :tangle ../../home/.emacs.d/init.el

* Package configuration

=use-package= is a macro for organising package configuration.

https://github.com/jwiegley/use-package

#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)

#+end_src

Package updates.

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results nil)
    :config
    (auto-package-update-maybe))

#+end_src

* General configuration

Measure startup time.

#+begin_src emacs-lisp

(defun qucchia-display-startup-time ()
  "Send a message describing how long it took Emacs to start up."
  (message "Emacs loaded in %s with %d garbage collections."
    (format "%.2f seconds"
    (float-time
      (time-subtract after-init-time before-init-time)))
  gcs-done))

#+end_src

General Emacs configuration.

#+begin_src emacs-lisp

  (use-package emacs
    :custom (tab-width 2)
    :hook (emacs-startup . qucchia-display-startup-time)
    :init
    (electric-quote-mode t)
    ;; Make startup faster by reducing the frequency of garbage collection
    (setq gc-cons-threshold (* 100 1000 1000)) ;; 100MB
    ;; Preserve clipboard from external applications
    (setq save-interprogram-paste-before-kill t))

#+end_src

Enable some commands.

#+begin_src emacs-lisp

  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'set-goal-column 'disabled nil)

#+end_src

* Load other files

My personal Emacs configuration.

#+begin_src emacs-lisp

  (defcustom qucchia-lisp-directory "~/.emacs.d/lisp"
    "Directory where lisp files from qucchia configuration are stored."
    :type 'string
    :group 'qucchia)

  (defcustom qucchia-use-exwm t
    "If non-nil, load EXWM."
    :type 'boolean
    :group 'qucchia)

  (defun qucchia-load-file (file)
    "Load an emacs lisp file from ‘qucchia-lisp-directory’."
    (load-file (expand-file-name file qucchia-lisp-directory)))

#+end_src

Load other files.

#+begin_src emacs-lisp

  (dolist (package '("dolly"
                     "dotty"
                     "erised"
                     "george"
                     "lieutenant"
                     "mash"
                     "psst"
                     "racket"
                     "softwear"))
    (qucchia-load-file (concat package ".el")))

  (when qucchia-use-exwm (qucchia-load-file "desktop.el"))

  (provide 'qucchia)

#+end_src

* Dired

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :bind (("C-x C-j" . dired-jump))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer
      "H" 'dired-omit-mode))

  (add-hook 'dired-mode-hook #'dired-omit-mode)

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    (setq dired-open-extensions '(("png" . "display"))))

  (use-package diredfl
    :hook (dired-mode . diredfl-mode))

  (provide 'tired)

#+end_src
