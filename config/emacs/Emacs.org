#+title:Emacs
#+subtitle:My personal Emacs configuration.
#+PROPERTY: header-args:emacs-lisp :tangle ../../home/.emacs.d/init.el :comments org

* Contents

This file, [[file:Emacs.org][Emacs]], contains the most general configuration. I also have some other files with more specific configuration, listed below.

- [[file:Desktop.org][Desktop]]: EXWM desktop configuration.
- Go dotty with [[file:Dotty.org][Dotty]]: dotfiles utilities.
- [[file:Erised.org][Erised]]: just the user interface I want.
- [[file:George.org][George]]: Org configuration.
- [[file:Lieutenant.org][Lieutenant]]: keymaps and keybindings.
- [[file:Mash.org][Mash]]: terminals configuration.
- [[file:Psst.org][Psst]]: all the hints and help I could need.
- Make a racket with [[file:Racket.org][Racket]]: music utilities.
- Program comfortably with [[file:Softwear.org][Softwear]]: Development configuration.

Also see [[../Theme.org][Theme]].

* Shell script

#+begin_src shell :tangle ../../home/.bin/dotfiles-start-emacs :tangle-mode (identity #o755)

  #!/bin/sh
  exec dbus-launch emacs -mm --debug-init

#+end_src

* Package configuration

The package archives used are:
- [[https://elpa.gnu.org/][ELPA]], Emacsâ€™ official package archive
- [[https://stable.melpa.org/][MELPA]], an archive with more packages
- The [[https://orgmode.org/][Org Mode]] archive

#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

#+end_src

=use-package= is a macro for organising package configuration.

Links: [[https://github.com/jwiegley/use-package][GitHub]], [[info:use-package][Info]]

#+begin_src emacs-lisp

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)

#+end_src

Package updates.

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results nil)
    :config
    (auto-package-update-maybe))

#+end_src

* General configuration

Measure startup time.

#+begin_src emacs-lisp

(defun qucchia-display-startup-time ()
  "Send a message describing how long it took Emacs to start up."
  (message "Emacs loaded in %s with %d garbage collections."
    (format "%.2f seconds"
    (float-time
      (time-subtract after-init-time before-init-time)))
  gcs-done))

#+end_src

General Emacs configuration.

#+begin_src emacs-lisp

  (use-package emacs
    :custom (tab-width 2)
    :hook (emacs-startup . qucchia-display-startup-time)
    :init
    ;; Make startup faster by reducing the frequency of garbage collection
    (setq gc-cons-threshold (* 100 1000 1000)) ;; 100MB
    ;; Preserve clipboard from external applications
    (setq save-interprogram-paste-before-kill t))

#+end_src

Enable some commands.

#+begin_src emacs-lisp

  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'set-goal-column 'disabled nil)

#+end_src

* Load other files

#+begin_src emacs-lisp

  (defcustom qucchia-lisp-directory "~/.emacs.d/lisp"
    "Directory where Lisp files from qucchia configuration are stored."
    :type 'string
    :group 'qucchia)

  (defun qucchia-load (symbol)
    "Load a qucchia package.  SYMBOL is the name of the package."
    (load-file (expand-file-name
      (format "%s.el" (symbol-name symbol)) qucchia-lisp-directory)))

  ;; Load packages
  (dolist (package '(dotty erised george lieutenant mash
                     psst racket softwear))
    (qucchia-load package))

  (provide 'qucchia)

#+end_src

* Dired

Dired is the builtin file manager in Emacs.

Links: [[info:emacs#Dired][Info]]

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :bind (("C-x C-j" . dired-jump))
    :config
    (require 'evil-collection)
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer
      "H" 'dired-omit-mode))

  (require 'dired-x)
  (add-hook 'dired-mode-hook #'dired-omit-mode)

#+end_src

By default, Dired opens a buffer for every directory open, which can clutter the buffer list. The =dired-single= package avoids this.
https://github.com/crocket/dired-single/

#+begin_src emacs-lisp

  (use-package dired-single
    :commands (dired dired-jump))

#+end_src

=all-the-icons-dired= shows icons for folders and different file types.
https://github.com/wyuenho/all-the-icons-dired/

#+begin_src emacs-lisp

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

=dired-open= allows choosing what programs to use to open different types of files.

#+begin_src emacs-lisp

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    (setq dired-open-extensions '(("png" . "display")
                                  ("mkv" . "mpv"))))

#+end_src

=dired-fl= enables additional font locking, making Dired more aesthetically pleasing.
https://github.com/purcell/diredfl/

#+begin_src emacs-lisp

  (use-package diredfl
    :hook (dired-mode . diredfl-mode))

#+end_src

* Proxy

Utilities for using Tor.

#+begin_src emacs-lisp

  (defcustom qucchia-use-tor t
    "If non-nil, use torsocks in `qucchia-start-process-shell-command'."
    :type 'boolean
    :group 'qucchia)

  (defun qucchia-toggle-tor ()
    "Toggle `qucchia-use-tor'."
    (interactive)
    (setq qucchia-use-tor (not qucchia-use-tor))
    (message "Tor is %s" (if qucchia-use-tor "enabled" "disabled")))

  (defun qucchia-start-process-shell-command (name buffer command)
    "Start program in a subprocess.
  If `qucchia-use-tor' is non-nil, wrap it in torsocks.

  NAME is a name for process.  BUFFER is the buffer (or buffer
  name) to associate with the process.  COMMAND is the shell
  command to run.  See `start-process-shell-command' for more
  details."
    (if qucchia-use-tor
      (start-process-shell-command name buffer (string-join (list "torsocks " command)))
      (start-process-shell-command name buffer command)))

#+end_src
